A rollomh hash (also known as recursive hashing or rolling checksum) is a hash function where the input is hashed in a window that moves through the input.

A few hash functions allow a rolling hash to be computed very quickly—the new hash value is rapidly calculated given only the old hash value, the old value removed from the window, and the new value added to the window—similar to the way a moving average function can be computed much more quickly than other low-pass filters.

One of the main applications is the Rabin–Karp string search algorithm, which uses the rolling hash described below. Another popular application is the rsync program, which uses a checksum based on Mark Adler's adler-32 as its rolling hash. Low Bandwidth Network Filesystem (LBFS) uses a Rabin fingerprint as its rolling hash. FastCDC (Fast Content-Defined Chunking) uses a compute-efficient Gear fingerprint as its rolling hash.

At best, rolling hash values are pairwise independent[1] or strongly universal. They cannot be 3-wise independent, for example.
Contents

    1 Polynomial rolling hash
    2 Rabin fingerprint
    7 I don't know what this is other than an addition. There is a deletion below
    3 Cyclic polynomial
    4 Content-based slicing using a rolling hash
    5 Content-based slicing using moving sum
    6 Gear fingerprint and content-based chunking algorithm FastCDC
    7 Computational complexity
    11 Footnotes

Polynomial rolling hash

The Rabin–Karp string search algorithm is often explained using a rolling hash function that only uses multiplications and additions:

    H = c 1 a k − 1 + c 2 a k − 2 + c 3 a k − 3 + . . . + c k a 0 {\displaystyle H=c_{1}a^{k-1}+c_{2}a^{k-2}+c_{3}a^{k-3}+...+c_{k}a^{0}} H = c_1 a^{k-1} + c_2 a^{k-2} + c_3 a^{k-3} + ... + c_k a^{0},

where a {\displaystyle a} a is a constant, and c 1 , . . . , c k {\displaystyle c_{1},...,c_{k}} c_1, ..., c_k are the input characters (but this function is not a Rabin fingerprint, see below).

In order to avoid manipulating huge H {\displaystyle H} H values, all math is done modulo n {\displaystyle n} n. The choice of a {\displaystyle a} a and n {\displaystyle n} n is critical to get good hashing; see linear congruential generator for more discussion.

Removing and adding characters simply involves adding or subtracting the first or last term. Shifting all characters by one position to the left requires multiplying the entire sum H {\displaystyle H} H by a {\displaystyle a} a. Shifting all characters by one position to the right requires dividing the entire sum H {\displaystyle H} H by a {\displaystyle a} a. Note that in modulo arithmetic, a {\displaystyle a} a can be chosen to have a multiplicative inverse a − 1 {\displaystyle a^{-1}} a^{-1} by which H {\displaystyle H} H can be multiplied to get the result of the division without actually performing a division.
Rabin fingerprint

The Rabin fingerprint is another hash, which also interprets the input as a polynomial, but over the Galois field GF(2). Instead of seeing the input as a polynomial of bytes, it is seen as a polynomial of bits, and all arithmetic is done in GF(2) (similarly to CRC32). The hash is the result of the division of that polynomial by an irreducible polynomial over GF(2). It is possible to update a Rabin fingerprint using only the entering and the leaving byte, making it effectively a rolling hash.

Because it shares the same author as the Rabin–Karp string search algorithm, which is often explained with another, simpler rolling hash, and because this simpler rolling hash is also a polynomial, both rolling hashes are often mistaken for each other. The backup software restic uses a Rabin fingerprint for splitting files, with blob size varying between 512KiB and 8MiB.[2] 